<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sugo.takeout.mapper.TakeoutSellerMapper">

    <resultMap id="BaseResultMap" type="com.sugo.takeout.bean.model.TakeoutSeller">
            <id property="id" column="id" jdbcType="INTEGER"/>
            <result property="name" column="name" jdbcType="VARCHAR"/>
            <result property="cover" column="cover" jdbcType="VARCHAR"/>
            <result property="description" column="description" jdbcType="VARCHAR"/>
            <result property="avatar" column="avatar" jdbcType="VARCHAR"/>
            <result property="typeId" column="type_id" jdbcType="INTEGER"/>
            <result property="phone" column="phone" jdbcType="VARCHAR"/>
            <result property="phoneAdditional" column="phone_additional" jdbcType="VARCHAR"/>
            <result property="city" column="city" jdbcType="VARCHAR"/>
            <result property="province" column="province" jdbcType="VARCHAR"/>
            <result property="enterpriseName" column="enterprise_name" jdbcType="VARCHAR"/>
            <result property="enterpriseAddress" column="enterprise_address" jdbcType="VARCHAR"/>
            <result property="enterprisePic" column="enterprise_pic" jdbcType="VARCHAR"/>
            <result property="userId" column="user_id" jdbcType="INTEGER"/>
            <result property="deliveryTimeStart" column="delivery_time_start" jdbcType="TIME"/>
            <result property="deliveryTimeEnd" column="delivery_time_end" jdbcType="TIME"/>
            <result property="minDeliveryPrice" column="min_delivery_price" jdbcType="DECIMAL"/>
            <result property="status" column="status" jdbcType="TINYINT"/>
            <result property="notice" column="notice" jdbcType="VARCHAR"/>
            <result property="location" column="location" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="UnionCouponMap" type="com.sugo.takeout.bean.dto.SellerDetailDto" extends="BaseResultMap" >
        <collection property="activities" ofType="com.sugo.takeout.bean.model.TakeoutActivity" javaType="java.util.ArrayList" column="id" jdbcType="INTEGER"
                    select="com.sugo.takeout.mapper.TakeoutActivityMapper.findBySellerId" />
        <collection property="coupons" ofType="com.sugo.takeout.bean.model.TakeoutCoupon" javaType="java.util.ArrayList" column="id" jdbcType="INTEGER"
                    select="com.sugo.takeout.mapper.TakeoutCouponMapper.findBySellerId" />
    </resultMap>

    <sql id="Base_Column_List">
        id,user_id,name,cover, delivery_time_start, delivery_time_end,
        min_delivery_price, notice, status,
        description,avatar,type_id,
        phone,phone_additional,city, location,
        province,enterprise_name,enterprise_address,
        enterprise_pic
    </sql>

    <select id="getDetailById" resultMap="UnionCouponMap">
        select id,name,cover,description,avatar,phone,phone_additional,enterprise_name,enterprise_address,
               enterprise_pic,delivery_time_start,delivery_time_end,min_delivery_price,notice,
               location,
               (select count(*) from takeout_goods_evaluate where seller_id = id) as commentNum
       from takeout_seller where id = #{id}
    </select>

    <select id="getDataById" resultType="com.sugo.takeout.bean.dto.SellerDataDto">
        select *, (amount / numberOfPayers) as customerUnitPrice,
               (numberOfPaymentOrders - refundQuantity) effectiveOrderQuantity,
               (amount - (select ifnull(sum(total), 0) from takeout_order where takeout_order.status in (4 , 5) and seller_id = #{sellerId})) estimatedIncome
               from (
                  select id sellerId, avatar logo,
                         name sellerName,
                         (select count(*) from takeout_order where takeout_seller.status = 1 and seller_id = takeout_seller.id) quantityToBePaid,
                         (select count(*) from takeout_delivery as temp where
                                  temp.seller_status = 1 and order_code
                                  in (select code from takeout_order where seller_id = takeout_seller.id)
                                  and id = (select max(id) from takeout_delivery where order_code = temp.order_code)) numberOfMealsToBeServed,
                         (select count(*) from takeout_order where takeout_order.status = 5 and seller_id = takeout_seller.id) refundQuantity,
                         (select ifnull(avg(score), 0) from takeout_goods_evaluate where seller_id = takeout_seller.id) score,
                         (select ifnull(sum(total), 0) from takeout_order where takeout_order.status in (2, 3, 5, 6) and seller_id = takeout_seller.id) amount,
                         (select count(distinct takeout_order.user_id) from takeout_order where takeout_order.status in (2, 3, 5, 6) and seller_id = takeout_seller.id) numberOfPayers,
                         (select count(*) from takeout_order where takeout_order.status in (2, 3, 5, 6) and seller_id = takeout_seller.id) numberOfPaymentOrders,
                         (select count(*) from takeout_footprint where seller_id = takeout_seller.id) numberOfVisitors
                  from takeout_seller where id = #{sellerId}
                 ) as temp
    </select>

</mapper>
